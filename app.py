import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import streamlit as st
import pickle
from tensorflow.keras.models import load_model
import numpy as np

# Load the TF-IDF tokenizer
with open('assets/tfidf_tokenizer.pkl', 'rb') as f:
    tfidf_tokenizer = pickle.load(f)

# Load the trained model
loaded_model = load_model('assets/text_classification_model.h5')

# Function to preprocess text and make predictions
def predict_outcome(text):
    # Preprocess the text using the loaded tokenizer
    text_features = tfidf_tokenizer.transform([text])
    
    # Make predictions using the loaded model
    predictions = loaded_model.predict(text_features)
    
    # Return the predicted outcome (1 for positive, 0 for negative)
    return int(np.round(predictions[0][0]))

# Example passages
example_passages = {
    "AI in Healthcare": """
    The use of artificial intelligence (AI) in healthcare has revolutionized the way medical professionals diagnose and treat patients. With advanced algorithms and machine learning techniques, AI can analyze vast amounts of medical data to identify patterns and predict outcomes, aiding in early diagnosis and personalized treatment plans. This technology holds great promise for improving patient outcomes and reducing healthcare costs.
    """,
    "Climate Change": """
    Climate change is one of the most pressing issues facing our planet today. The increasing levels of greenhouse gases in the atmosphere, primarily due to human activities such as burning fossil fuels and deforestation, are causing global temperatures to rise. This has led to more frequent and severe weather events, melting polar ice, and rising sea levels. Addressing climate change requires immediate and concerted efforts from governments, businesses, and individuals worldwide.
    """,
    "Remote Work": """
    The COVID-19 pandemic has accelerated the adoption of remote work across various industries. Many companies have realized the benefits of allowing employees to work from home, including increased productivity, reduced overhead costs, and improved work-life balance. However, remote work also presents challenges such as maintaining team cohesion, ensuring cybersecurity, and managing employee well-being. As remote work becomes more prevalent, organizations must find ways to address these challenges and support their remote workforce.
    """
}

# CSS for dark mode
dark_mode_css = """
<style>
body {
    background-color: #000000;
    color: #ffffff;
    font-family: Arial, sans-serif;
}
</style>
"""

def main():
    # Inject custom CSS for dark mode
    st.markdown(dark_mode_css, unsafe_allow_html=True)
    
    # Sidebar for navigation
    st.sidebar.title("Navigation")
    page = st.sidebar.radio("Go to", ["Main", "Detection", "Resources"])

    if page == "Main":
        st.title("Detection of Large-Language Model (LLM) Generated Text")
        
        # About the Project section
        st.header("About the Project")
        st.markdown("""
        In this project, we explore the task of detecting text generated by Large-Language Models (LLMs). LLM models are renowned for their ability to produce high-quality text rapidly, which finds applications in chatbots, content generation, and automated writing. However, with their widespread use comes the necessity to distinguish between human-generated and LLM-generated text due to concerns related to misinformation, plagiarism, and ethical considerations.
        """)
        
        # Project Flow section
        st.header("Project Flow")
        st.subheader("Introduction")
        st.markdown("""
        We begin by outlining the significance of detecting LLM-generated text, emphasizing its role in combating misinformation, preventing plagiarism, and upholding ethical standards.
        """)
        
        st.subheader("Need for Detection of LLM Generated Text")
        st.markdown("""
        - **Misinformation Control:** LLMs can propagate false information quickly.
        - **Plagiarism Prevention:** Detecting LLM-generated content helps maintain integrity in research and content creation.
        - **Ethical Considerations:** Identifying the origin of text content is crucial, especially in sensitive domains like news and legal documentation.
        - **Trust and Transparency:** Detection enhances credibility by ensuring transparency about the source of text content.
        """)
        
        st.subheader("Summary")
        st.markdown("""
        We address the challenge of detecting LLM-generated text using natural language processing (NLP) techniques. The notebook covers feature engineering, model selection, and evaluation metrics aimed at building a robust detection system.
        """)
        
        # Results section
        st.header("Results")
        st.markdown("""
        - **Class Distribution:** We analyzed the distribution of LLM-generated text versus human-generated text in the datasets. The combined dataset showed a balanced distribution, with X% of the data labeled as LLM-generated.
        - **Word Clouds:** Visual representations of word clouds for LLM-generated and human-generated text highlight the distinct patterns and vocabulary used in each category.
        - **Model Performance:** We trained a neural network model on TF-IDF vectors derived from text data. The model achieved high accuracy and low loss on the validation set, demonstrating its effectiveness in distinguishing between LLM-generated and human-generated text.
        """)
        
        # Conclusion section
        st.header("Conclusion")
        st.markdown("""
        In conclusion, the detection of LLM-generated text plays a crucial role in maintaining the integrity and credibility of digital communication. By developing and deploying robust detection mechanisms, we can mitigate the risks associated with misinformation, plagiarism, and ethical concerns in text-based content. This notebook serves as a foundational step towards further advancements in NLP techniques for text authenticity verification.
        """)
        
        # Implementation Notes section (optional)
        st.header("Implementation Notes")
        st.markdown("""
        - **Libraries Used:** The project utilized pandas, numpy, matplotlib, seaborn, tensorflow, and wordcloud for data handling, visualization, model building, and evaluation.
        - **Data Sources:** The datasets used in this project included 'train_v2_drcat_02.csv' and 'train_essays.csv', which were combined and processed for analysis.
        - **Model Development:** A simple neural network architecture was implemented for text classification based on TF-IDF vectors, achieving promising results in detecting LLM-generated text.
        """)

    elif page == "Detection":
        st.title("AI Text Detection")
        
        # Functionality remains the same as before
        st.subheader("Example Passages")
        example_choice = st.selectbox("Choose an example passage:", list(example_passages.keys()))
        if st.button("Try"):
            input_text = example_passages[example_choice]
            st.session_state['input_text'] = input_text
        
        input_text = st.text_area("Enter the text you want to classify:", value=st.session_state.get('input_text', ''))
        
        if st.button("Predict"):
            if input_text.strip() != "":
                predicted_label = predict_outcome(input_text)
                if predicted_label == 1:
                    st.markdown("<span style='color:red'>ü§ñ AI Detected</span>", unsafe_allow_html=True)
                else:
                    st.markdown("<span style='color:green'>üë§ Human Written</span>", unsafe_allow_html=True)
            else:
                st.write("Please enter some text.")

    elif page == "Resources":
        st.title("Resources")
        st.write("Find more information about the project and related resources at the links below.")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("GitHub"):
                st.write("[GitHub Repository](https://github.com/Harshithvarma007/LLM_Text_Detection) üåê")
        
        with col2:
            if st.button("Kaggle"):
                st.write("[Kaggle Notebook](https://www.kaggle.com/code/harshithvarma007/llm-text-detection-99-47-accuracy) üìö")
        
        with col3:
            if st.button("Blog"):
                st.write("[Medium](https://medium.com/@harshith007varma007/llm-text-detection-79aa048fd325) üìÑ")

if __name__ == "__main__":
    main()
